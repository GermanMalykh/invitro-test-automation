plugins {
    id 'java'
    id 'io.qameta.allure' version '2.12.0'
    id 'io.freefair.lombok' version '8.14'
}

group 'invitro.autotest'
version '1.0-SNAPSHOT'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

def junit5Version = '5.13.4'
def selenideVersion = '7.10.0'
def slf4jVersion = '2.0.17'
def allureVersion = '2.29.0'
def assertjVersion = '3.27.4'
def annotationsVersion = '24.0.1'
def restAssuredVersion = '5.5.5'
def jacksonVersion = '2.19.2'
def dataFakerVersion = '2.4.4'
def freeMarkerVersion = '2.3.32'

repositories {
    mavenCentral()
}

configurations {
    androidTest {
        canBeResolved = true
        canBeConsumed = false
    }
    webTest {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:${junit5Version}",
            "com.codeborne:selenide:${selenideVersion}",
            "com.codeborne:selenide-appium:${selenideVersion}",
            "org.seleniumhq.selenium:selenium-devtools-v128:4.26.0",
            "io.qameta.allure:allure-junit5:${allureVersion}",
            "io.qameta.allure:allure-selenide:${allureVersion}",
            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "org.assertj:assertj-core:${assertjVersion}",
            "org.jetbrains:annotations:${annotationsVersion}",
            "io.rest-assured:rest-assured:${restAssuredVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "net.datafaker:datafaker:${dataFakerVersion}",
            "org.freemarker:freemarker:${freeMarkerVersion}"
    )
    testRuntimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
}

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "Gradle", gradle.gradleVersion
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform {
        // По умолчанию не запускаем никакие тесты
        includeTags("nonexistent_tag")
    }
    // Показываем сообщение о том, как запускать тесты
    doFirst {
        println "Задача 'test' не запускает тесты по умолчанию."
        println "Используйте:"
        println "  ./gradlew allRemoteTests      - для запуска всех тестов удаленно (исключая only-local-ru-ip)"
        println "  ./gradlew allLocalTests       - для запуска всех тестов локально"
        println "  ./gradlew androidRemoteTests  - для запуска Android тестов удаленно"
        println "  ./gradlew androidLocalTests   - для запуска Android тестов локально"
        println "  ./gradlew webRemoteTests      - для запуска Web тестов удаленно"
        println "  ./gradlew webLocalTests       - для запуска Web тестов локально"
        println "  ./gradlew apiLocalTests       - для API тестов локально"
        println "  ./gradlew apiRemoteTests      - для API тестов удаленно (исключая only-local-ru-ip)"
    }
}

tasks.register('apiLocalTests', Test) {
    useJUnitPlatform {
        includeTags("api")
    }
    systemProperty "env", "local"
    systemProperty "test.type", "api"
    description = 'Запускает все API тесты локально'
}

tasks.register('apiRemoteTests', Test) {
    useJUnitPlatform {
        includeTags("api")
        excludeTags("only-local-ru-ip")
    }
    systemProperty "env", "remote"
    systemProperty "test.type", "api"
    description = 'Запускает API тесты удаленно (исключая only-local-ru-ip)'
}

tasks.register('androidRemoteTests', Test) {
    useJUnitPlatform {
        includeTags("android")
    }
    systemProperty "env", "remote"
    systemProperty "test.type", "android"
    classpath = configurations.androidTest + sourceSets.test.runtimeClasspath
    description = 'Запускает все Android тесты удаленно'
}

tasks.register('androidLocalTests', Test) {
    useJUnitPlatform {
        includeTags("android")
    }
    systemProperty "env", "local"
    systemProperty "test.type", "android"
    classpath = configurations.androidTest + sourceSets.test.runtimeClasspath
    description = 'Запускает все Android тесты локально'
}

tasks.register('webRemoteTests', Test) {
    useJUnitPlatform {
        includeTags("web")
    }
    systemProperty "env", "remote"
    systemProperty "test.type", "web"
    classpath = sourceSets.test.runtimeClasspath.filter {
        !it.name.contains('selenide-appium')
    }
    description = 'Запускает все Web тесты удаленно'
}

tasks.register('webLocalTests', Test) {
    useJUnitPlatform {
        includeTags("web")
    }
    systemProperty "env", "local"
    systemProperty "test.type", "web"
    classpath = sourceSets.test.runtimeClasspath.filter {
        !it.name.contains('selenide-appium')
    }
    description = 'Запускает все Web тесты локально'
}

tasks.register('allLocalTests', Test) {
    useJUnitPlatform {
        includeTags("android", "web", "api")
    }
    systemProperty "env", "local"
    systemProperty "test.type", "all"
    classpath = configurations.androidTest + sourceSets.test.runtimeClasspath
    description = 'Запускает все тесты локально (Android, Web, API)'
}

tasks.register('allRemoteTests', Test) {
    useJUnitPlatform {
        includeTags("android", "web", "api")
        excludeTags("only-local-ru-ip")
    }
    systemProperty "env", "remote"
    systemProperty "test.type", "all"
    classpath = configurations.androidTest + sourceSets.test.runtimeClasspath
    description = 'Запускает все тесты удаленно (Android, Web, API) - исключая only-local-ru-ip'
}